import unittest
from yahtzee import gen_all_holds


class Yahtzee(unittest.TestCase):

    def test_gen_all_holds(self):
        # Check when you roll 1 dice with a value of 1
        computed = gen_all_holds([1])
        expected = set([(), (1,)])
        self.assertEqual(computed, expected, "Test1: 1 die")

        # Check when you roll 2 die with the values of 1, 4
        computed = gen_all_holds([1, 4])
        expected = {(), (1,), (4,), (1, 4)}  # same as set([(), (1,), (4,), (1, 4)])
        self.assertEqual(computed, expected, "Test2: 2 die")

        # Check when you roll 5 die with the values of 1, 5, 2, 3, 4
        computed = gen_all_holds([1, 5, 2, 3, 4])
        expected = {(2, 3, 5), (1, 3), (1, 4, 5), (2, 5), (2, 3, 4, 5), (1, 3, 4, 5), (1, 2), (1,), (3,), (1, 5), (5,), (2, 4, 5), (1, 2, 3, 5), (4, 5), (1, 2, 3, 4, 5), (1, 4),
                    (1, 2, 3), (2, 3), (1, 2, 4), (1, 2, 5), (3, 5), (1, 2, 3, 4), (2,), (4,), (1, 3, 5), (), (1, 3, 4), (3, 4, 5), (2, 3, 4), (3, 4), (2, 4), (1, 2, 4, 5)}
        self.assertEqual(computed, expected, "Test3: 5 die")

        # check when you roll 7 die
        computed = gen_all_holds([1, 9, 2, 3, 6, 7, 3])
        expected = {(6, 9), (2, 3, 3, 7), (1, 2, 3, 3, 9), (1, 3, 3, 7, 9), (3, 3, 7, 9), (1, 6), (1, 6, 7, 9), (3, 7), (3, 6, 9), (2, 6, 7), (6, 7), (7,), (3, 6, 7, 9), (2, 6), (1, 2, 3, 3, 6, 7, 9), (1, 2, 3, 6, 7), (1, 2, 3, 6, 9), (3, 3, 6, 7), (1, 3, 7), (2, 3, 6, 7), (1, 2, 6), (1, 3, 3), (1, 2, 7, 9), (2, 6, 9), (2, 3, 6), (1, 2, 3, 7), (9,), (2, 3, 3, 6, 9), (1, 3, 3, 9), (1, 2, 3, 9), (1, 3, 3, 6), (1,), (2, 3, 3, 6), (2, 6, 7, 9), (3, 6), (1, 3, 3, 6, 7, 9), (3, 3, 7), (2, 3, 3, 9), (1, 3, 9), (1, 2, 6, 7), (1, 2, 3, 3, 6, 9), (3, 3, 9), (2, 7, 9), (1, 2, 6, 9), (6, 7, 9), (2, 3, 7, 9), (2, 7), (1, 3, 6, 7), (2,), (1, 7, 9), (1, 3), (1, 2, 9), (2, 3, 3, 7, 9), (1, 3, 3, 6, 9), (1, 3, 3, 6, 7), (1, 2, 3, 3, 6), (3,), (2, 3, 3, 6, 7, 9), (1, 2, 3, 3), (1, 2, 3, 6), (1, 3, 3, 7), (1, 2, 3), (3, 9), (2, 3), (1, 9), (1, 2, 3, 7, 9), (2, 3, 9), (3, 7, 9), (1, 2, 6, 7, 9), (1, 3, 6), (1, 2, 3, 3, 6, 7), (1, 2, 7), (), (1, 2, 3, 3, 7), (1, 7), (2, 3, 6, 7, 9), (2, 3, 7), (1, 3, 6, 7, 9), (1, 2), (1, 3, 6, 9), (3, 3), (2, 9), (1, 6, 9), (2, 3, 3), (2, 3, 6, 9), (2, 3, 3, 6, 7), (3, 6, 7), (3, 3, 6), (1, 2, 3, 3, 7, 9), (3, 3, 6, 9), (1, 2, 3, 6, 7, 9), (1, 6, 7), (3, 3, 6, 7, 9), (7, 9), (1, 3, 7, 9),
                    (6,)}
        self.assertEqual(computed, expected, "Test4: 7 die")

        
